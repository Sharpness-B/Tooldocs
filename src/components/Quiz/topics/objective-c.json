[{"question":"# Q1. What is the value of s?\n```\nNSMutableString *s = [NSMutableString stringWithString: @\"123\"];\n[s appendString: @\"456\"];\n\n```","options":[" 123456"," 123"," 456"," This code contains an error."],"anwserIndex":0,"answerText":" 123456"},{"question":"# Q2. What's the value of i after these statements?\n```\nNSString *str = nil;\nNSInteger i = str.integerValue;\n\n```","options":[" nil"," 0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)"," -1"," This code crashes."],"anwserIndex":1,"answerText":" 0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)"},{"question":"# Q3. What value is in str after this line in executed?","options":["NSString str = \"test\" + \" \" + \"more\";"," This code contains an error"," test"," nil"," test more"],"anwserIndex":1,"answerText":" This code contains an error"},{"question":"# Q4. What does this code print?\n```\n    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\n      return evaluatedObject.intValue % 2 == 0;\n    }];\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n    NSLog(@\"%@\", n2.firstObject);\n\n```","options":[" 2"," 1,2,3"," 1,2"," Nothing, since this code contains an error."],"anwserIndex":0,"answerText":" 2"},{"question":"# Q5. Property defaults include `**\\_\\_\\_**`?","options":[" atomic/strong"," atomic/weak"," nonatomic/weak"," nonatomic/strong"],"anwserIndex":0,"answerText":" atomic/strong"},{"question":"# Q6. What is the key difference between NSDictionary and NSMutableDictionary?","options":[" NSMutableDictionary's values can change"," NSMutableDictionary has not initializers."," NSDictionary can't be copied."," NSDictionary's values can change."],"anwserIndex":0,"answerText":" NSMutableDictionary's values can change"},{"question":"# Q7. What is foo?","options":["-(float)foo;"," A function with a return type of float."," This code contains an error."," A variable declaration of type float."," A property of type float."],"anwserIndex":1,"answerText":" A function with a return type of float."},{"question":"# Q8. What can you glean from this line?","options":["#import \"NSString+NameHelper.h\""," NameHelper is a category of NSString."," NameHelper is a subclass of NSString."," NSString implements the NameHelper protocol."," NSString has a helper class."],"anwserIndex":1,"answerText":" NameHelper is a category of NSString."},{"question":"# Q9. What's wrong with this code?","options":["float x = 5.;"," Nothing is wrong with this code."," Declarations do not need semicolons."," x=5 is an invalid float."," Variables can't be declared and initialized in the same state."],"anwserIndex":1,"answerText":" Nothing is wrong with this code."},{"question":"# Q10. How many times with this loop be executed?\n```\nfor (int x=0; x<100; x++) {\n  x = x + 1;\n}\n\n```","options":[" 50"," 99"," 100"," This code contains an error."],"anwserIndex":0,"answerText":" 50"},{"question":"# Q11. What is this code an example of?","options":["[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];"," Key-Value Observing"," Class Value Observing"," Key-Data Observing"," KeyPath Observing"],"anwserIndex":1,"answerText":" Key-Value Observing"},{"question":"# Q12. What does ARC stand for?","options":[" Automatic Reference Counting"," Automatic Retain Checking"," Async Retain Cycles"," Automatic Release Code"],"anwserIndex":0,"answerText":" Automatic Reference Counting"},{"question":"# Q13. What is printed for this code?\n```\nint val = 0;\nval = 1.5;\nprintf(\"%d\", val);\n\n```","options":[" 1"," 2"," 0"," This code contains an error."],"anwserIndex":0,"answerText":" 1"},{"question":"# Q14. What best describes class inheritance in Objective-C?","options":[" single inheritance but multiple protocol implementation"," Objective-C doesn't support inheritance"," dual class inheritance"," unlimited class inheritance and protocol adherence"],"anwserIndex":0,"answerText":" single inheritance but multiple protocol implementation"},{"question":"# Q15. How many keys does this NSDictionary have after this code is executed?","options":["NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];"," 2"," 4"," 5"," This code contains an error."],"anwserIndex":1,"answerText":" 2"},{"question":"# Q16. What is wrong with this code?\n```\nNSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@\"key\" forKey:@\"value\"];\n\n```","options":[" The key and value items are mixed"," Nothing is wrong with it"," You can't set the capacity of a dictionary"," NSMutableDictionary doesn't have a :setValue:forKey function."],"anwserIndex":1,"answerText":" Nothing is wrong with it"},{"question":"# Q17. What is printed from this code?\n```\nNSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\n\n```","options":[" print"," This code is invalid"," Nothing is printed from this code."," nil"],"anwserIndex":0,"answerText":" print"},{"question":"# Q18. What is different about this function?","options":["+(void)doSomething;"," It is static"," It is abstract."," It is inline."," This code contains an error."],"anwserIndex":1,"answerText":" It is static"},{"question":"# Q19. Structs can have `**\\_\\_\\_**`?","options":[" functions"," initializers"," fields"," all of these answers"],"anwserIndex":2,"answerText":" fields"},{"question":"# Q20. What is wrong with this code?\n```\n@interface MyClass : NSObject\n    @property (strong, nonatomic, readonly) NSString *name;\n  @end\n\n```","options":[" There is nothing wrong with this code."," There is not read-only directive."," MyClass doesn't implement NSObject."," Properties are declared in the implementation."],"anwserIndex":0,"answerText":" There is nothing wrong with this code."},{"question":"# Q21. What is an enums base type for the code below?","options":["typedef enum { Foo1, Foo2} Foo;"," There is no base type."," NSObject"," int"," NSNumber"],"anwserIndex":1,"answerText":" There is no base type."},{"question":"# Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?","options":[" UserDefaults"," plist file"," CoreData"," TextFile"],"anwserIndex":0,"answerText":" UserDefaults"},{"question":"# Q23. What are categories used for?","options":[" to extend other classes"," to manage access control"," to coordinate objects"," to group classes"],"anwserIndex":0,"answerText":" to extend other classes"},{"question":"# Q24. What is this Objective-C code checking?\n```\nif ([keyPath isInstanceOf:[NSString class]]) {\n}\n\n```","options":[" This code contains an error"," if keyPath is an instance of NSString"," if keyPath's baseclass is the same as NSString's baseclass"," if keyPath implements the same methods as NSString"],"anwserIndex":0,"answerText":" This code contains an error"},{"question":"# Q25. What is this a declaration of?","options":["int(^foo)(int);"," an Extension"," a Generic"," a block of code"," an abstract class"],"anwserIndex":3,"answerText":" a block of code"},{"question":"# Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?\n```\n1. _val = 1;\n2. self.val= 100;\n\n```","options":[" Statement 2, since it calls the auto-created setter on the property."," Statement 1, since it uses the property directly."," Statement 2, since it specifies the class instance to use."," Statement 1, since it calls the auto-created setter on the property."],"anwserIndex":0,"answerText":" Statement 2, since it calls the auto-created setter on the property."},{"question":"# Q27. What is wrong with this code?\n```\nfloat x = 2.0;\nint(^foo)(int) = ^(int n1) {\n  return (int)(n1*x);\n};\nfoo(5);\n\n```","options":[" Ints and floats can't be multiplied."," The parameter isn't declared correctly."," x is not in the right scope."," Nothing is wrong with this code."],"anwserIndex":3,"answerText":" Nothing is wrong with this code."},{"question":"# Q28. What's the difference between an array and a set?","options":[" Arrays are ordered, non-unique values."," Arrays are stored sorted."," Sets are ordered, unique values."," Sets can contain nils."],"anwserIndex":0,"answerText":" Arrays are ordered, non-unique values."},{"question":"# Q29. Dot notation can be used for `**\\_\\_\\_**`?","options":[" nothing, as they're never used in Objective-C"," function calls only"," property getter/setter"," parameter delimiters"],"anwserIndex":2,"answerText":" property getter/setter"},{"question":"# Q30. What is the value of newVals after this code is executed?\n```\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];\n\n```","options":[" 2,3"," nil"," This code contains an error"," 2,\"3\""],"anwserIndex":0,"answerText":" 2,3"},{"question":"# Q31. How would this function be called?","options":["-(int)foo:(int)a b:(int)c;"," self.foo(5, b:10);"," This code contains an error."," [self foo:5:10:20];"," [self foo:5 b:10];"],"anwserIndex":4,"answerText":" [self foo:5 b:10];"},{"question":"# Q32. What is the type of the error return value stored in json?\n```\n    NSError *error;\n    NSData *data;\n    id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];\n\n```","options":[" NSString"," NSArray"," id"," NSDictionary"]},{"question":"# Q33. What is significant about this function declaration?\n```\n    -(void)testFunc:(NSString**)str;\n\n```","options":["The parameter is passed by value and can not be changed","** is not allowed on a parameter","The parameter may be nil","The parameter is passed by reference and may be changed"],"anwserIndex":3,"answerText":"The parameter is passed by reference and may be changed"},{"question":"# Q34. What is printed from this code execution?\n```\n    typedef enum {\n        thing1,\n        thing2,\n        thing3\n    } Thing;\n\n\n    -(void) enumStuff {\n        NSLog(@\"%d\", thing2);\n    }\n\n```","options":["0","1","thing2","This code does not print anything"],"anwserIndex":1,"answerText":"1"},{"question":"# Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","options":["non-atomic","strong","weak","atomic"],"anwserIndex":3,"answerText":"atomic"}]