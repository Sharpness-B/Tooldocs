[{"question":"## Q1. Which Code saple will eventually cause the computer to run out of memory ?\n- [x]\n```\nwhile(1)\n{\n    char *smallString = (char *) malloc(10);\n}\n\n```","options":["- [ ]"]},{"question":"# Q2. What will this code print on the screen?\n```\nint f1 (int a, int b)\n{\n    if (a > b)\n    {\n        printf(\"A is greater than B\\n\");\n        return 1;\n    }\n    else\n    {\n        printf(\"B is greater than A\");\n        return 0;\n    }\n}\n\nmain()\n{\n    if (f1(20,10) || f1(10,20))\n        printf(\"C is fun!\\n\");\n}\n\n```","options":["A is greater then B","      C is fun!","A is greater then B","      B is greater then A","      C is fun!","A is greater then B","      B is greater then A","Northing is printed on Screen"],"anwserIndex":0,"answerText":"A is greater then B"},{"question":"# Q3. What is the name for calling a function inside the same function?","options":["recursion","subfunction","inner call","infinite loop"],"anwserIndex":0,"answerText":"recursion"},{"question":"# Q4. What does the declaration of variable c2 demonstrate?\n```\nmain(){\n    char c1 ='a';\n    char c2 = c1+10;\n}\n\n```","options":["character arithmetic","undefined assignment","type conversion","invalid declaration"],"anwserIndex":0,"answerText":"character arithmetic"},{"question":"# Q5. A pointer to void named vptr, has been set to point to a floating point variable named g. What is the valid way to dereference vptr to assign its pointed value to a float variable named f later in this program?\n```\nfloat g;\nvoid *vptr=&g;\n\n```","options":["f = _(float _)vptr;","f = (float \\*)vptr;","f = (float)\\*vptr;","f = \\*(float)vptr;"],"anwserIndex":2,"answerText":"f = (float)\\*vptr;"},{"question":"# Q6. What is this declaration an example of?\n```\nstruct s {\n    int i;\n    struct s *s1;\n    struct s *s2;\n};\n\n```","options":["a node","a linked list","a stack","a binary tree"],"anwserIndex":0,"answerText":"a node"},{"question":"# Q7. A C header file is a file with extension .h that contains function declarations and macro definitons to be shared between several source files. Header files are listed using the preprocessing directive #include, and can have one of the following formats: #include &lt;fileA&gt; or #include \"fileB\". What is the difference between these two formats?","options":["The preprocessor will try to locate the fileA in same directory as the source file, and the fileB in a predetermined directory path.","The preprocessor will try to locate the fileA in the fixed system directory. It will try to locate fileB in the directory path designated by the -l option added to the command line while compiling the source code.","The file using fileA syntax must be system files, of unlimited number. fileB must be a user file at a maximun of one per source file.","The preprocessor will try to locate the fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path."],"anwserIndex":3,"answerText":"The preprocessor will try to locate the fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path."},{"question":"# Q8. Using a for loop, how could you write a C code to count down from 10 to 1 and display each number on its own line?\n- [ ]\n```\nfor (int i = 0; i>=0, i--){\n    printf(\"%d\\n\", i);\n}//end of loop\n\n```","options":["- [ ]"]},{"question":"# Q9. What is not one of the reserved words in standard C?","options":["volatile","typeof","register","typedef"],"anwserIndex":1,"answerText":"typeof"},{"question":"# Q10. What does the program shown below return?\n```\nint main(){\n    int a=1, b=2, c=3, d=4;\n    int x = a;\n    if (a>b)\n    if (b<c) x=b;\n    else x=c;\n    return(x);\n}\n\n```","options":["1","3","2","0"],"anwserIndex":0,"answerText":"1"},{"question":"# Q11. Using the Union declaration below, how many bytes of memory space will the data of this type occupy?\n```\nunion Cars{\n    char make[20];\n    char model[30];\n    short year;\n}car;\n\n```","options":["32","54","30","52"],"anwserIndex":2,"answerText":"30"},{"question":"# Q12. In this code sample, what is not a problem for C compiler?\n```\nmain(){\n    constant int PI = 3.14;\n    printf(\"%f\\n\", pi);\n}\n\n```","options":["The value of PI needs to be set to 3.141593, not 3.14","The declaration of PI needs to say const, not constant.","The data type of PI needs to be float not int.","The printf statement needs to use PI, not pi."],"anwserIndex":1,"answerText":"The declaration of PI needs to say const, not constant."},{"question":"# Q13. Which is the smallest program to compile and run without errors?","options":["main()","int main() {return 0;}","main() { }","main() { ; }"],"anwserIndex":2,"answerText":"main() { }"},{"question":"# Q14. What is optional in a function declaration?","options":["data type of parameters","return type of function","parameter names","number of parameters"],"anwserIndex":2,"answerText":"parameter names"},{"question":"# Q15. C treats all devices, such as the display and the keyboard, as files. Which files opens automatically when a program executes?","options":["stdout","stdio.h","default.h","string.h"],"anwserIndex":0,"answerText":"stdout"},{"question":"# Q16. In which segment does dynamic memory allocation takes place?","options":["BSS Segment","stack","heap","data segment"],"anwserIndex":2,"answerText":"heap"},{"question":"# Q17. Which of the following do you use to deallocate memory?","options":["dalloc()","dealloc()","release()","free()"],"anwserIndex":3,"answerText":"free()"},{"question":"# Q18. In C language what are the basic building blocks that are constructed together to write a program?","options":["keywords","identifiers","tokens","functions"],"anwserIndex":2,"answerText":"tokens"},{"question":"# Q19. When is memory for a variable allocated?","options":["during the assigment of the variable","during the initialization of the variable","during the declaration of the variable","during the definition of the variable"],"anwserIndex":2,"answerText":"during the declaration of the variable"},{"question":"# Q20. By default c uses the call by value method to pass arguments to functions. How can you invoke the call by reference method?","options":["by using pointers","by declaring functions separately from defining them","by using recursive functions","by using global variables"],"anwserIndex":0,"answerText":"by using pointers"},{"question":"# Q21. A union allows you to store different **\\_** in the same **\\_**.","options":["Objects; Structure","Variables; Declaration","Data types; Memory location","Arrays; Header file"],"anwserIndex":2,"answerText":"Data types; Memory location"},{"question":"# Q22. What is the output of this program?\n```\nmain(){\n    char c1='a' , c2='A';\n    int i=c2-c1;\n    printf(\"%d\", i);\n}\n\n```","options":["32","Runtime error","-32","0"],"anwserIndex":2,"answerText":"-32"},{"question":"# Q23. What is the difference between scanf() and sscanf() functions?","options":["The scanf() function reads data formatted as a string; The sscanf() function reads string input from the screen.","The scanf() function reads formatted data from the keyword; The sscanf() function reads formatted input from a string.","The scanf() function reads string data from the keyword; The sscanf() function reads string data from a string.","The scanf() function reads formatted data from a file; The sscanf() function reads input from a selected string"],"anwserIndex":1,"answerText":"The scanf() function reads formatted data from the keyword; The sscanf() function reads formatted input from a string."},{"question":"# Q24. What is not a valid command with this declaration?","options":["char *string[20] = { \"one\", \"two\", \"three\"};","printf(\"%c\", string[1][2]);","printf(\"%s\", string[1][2]);","printf(\"%s\", string[1]);","printf(string[1]);"],"anwserIndex":2,"answerText":"printf(\"%s\", string[1][2]);"},{"question":"# Q25. What is the expression player->name equivalent to?","options":["player.name","(\\*player).name","\\*player.name","player.\\*name"],"anwserIndex":1,"answerText":"(\\*player).name"}]